paths:
  # the collection resource containing users
  /users: 
    # the GET method returning a representation of such collection
    get: 
      parameters:
        # a query param limiting the amount of returned users
        - in: "query"
          name: "skip" 
          type: "integer"
        # a query param limiting the amount of returned users
        - in: "query"
          name: "limit" 
          type: "integer"
      # supported output MIME types
      produces: 
        ["application/json", "application/xml", "application/yaml"]
      responses:
        # in case the request can be served...
        200: 
          description: "Success"
          schema:
            # ... an array of users is returned
            type: "array" 
            items:
              # reference to the User definition defined below
              $ref: "#/definitions/User"

        # Failure because of missing credentials
        401: { description: "Unauthorized." }
        # Failure because of lack of suffient permission
        403: { description: "Forbidden." }
definitions:
  User: # the user schema defined a few slides ago
  type: object
  properties:
    id:
      type: string
      format: uuid
    username:
      type: string
    fullName:
      type: string
    email:
      type: string
      format: email
    password:
      type: string
      format: password
    role:
      type: string
      enum: [admin, user]